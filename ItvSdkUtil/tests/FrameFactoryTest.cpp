#include "../ItvSdkUtil.h"
#include <ItvMediaSdk/include/codecConstants.h>
#include "../../ConnectionBroker.h"
#include "../../MediaType.h"
#include "../CFrameFactory.h"

#if defined(BOOST_TEST_MODULE)
#   undef BOOST_TEST_MODULE
#endif

#include <boost/test/test_tools.hpp>
#include <boost/test/unit_test_suite.hpp>
#include <boost/algorithm/string/split.hpp>
#include <boost/algorithm/string/classification.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/foreach.hpp>
#include <boost/format.hpp>
#include <limits>

uint8_t smallJpeg[] = {
    0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x01, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 
    0xFF, 0xDB, 0x00, 0x43, 0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08, 0x07, 0x07, 0x07, 0x09, 0x09, 0x08, 0x0A, 0x0C, 
    0x14, 0x0D, 0x0C, 0x0B, 0x0B, 0x0C, 0x19, 0x12, 0x13, 0x0F, 0x14, 0x1D, 0x1A, 0x1F, 0x1E, 0x1D, 0x1A, 0x1C, 0x1C, 0x20, 
    0x24, 0x2E, 0x27, 0x20, 0x22, 0x2C, 0x23, 0x1C, 0x1C, 0x28, 0x37, 0x29, 0x2C, 0x30, 0x31, 0x34, 0x34, 0x34, 0x1F, 0x27, 
    0x39, 0x3D, 0x38, 0x32, 0x3C, 0x2E, 0x33, 0x34, 0x32, 0xFF, 0xDB, 0x00, 0x43, 0x01, 0x09, 0x09, 0x09, 0x0C, 0x0B, 0x0C, 
    0x18, 0x0D, 0x0D, 0x18, 0x32, 0x21, 0x1C, 0x21, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
    0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
    0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0xFF, 0xC0, 
    0x00, 0x11, 0x08, 0x00, 0x01, 0x00, 0x01, 0x03, 0x01, 0x22, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xFF, 0xC4, 0x00, 
    0x1F, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
    0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0xFF, 0xC4, 0x00, 0xB5, 0x10, 0x00, 0x02, 0x01, 0x03, 0x03, 
    0x02, 0x04, 0x03, 0x05, 0x05, 0x04, 0x04, 0x00, 0x00, 0x01, 0x7D, 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 
    0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xA1, 0x08, 0x23, 0x42, 0xB1, 0xC1, 0x15, 
    0x52, 0xD1, 0xF0, 0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0A, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x25, 0x26, 0x27, 0x28, 0x29, 
    0x2A, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x53, 0x54, 0x55, 0x56, 
    0x57, 0x58, 0x59, 0x5A, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 
    0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0xA2, 0xA3, 0xA4, 
    0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 
    0xC7, 0xC8, 0xC9, 0xCA, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 
    0xE8, 0xE9, 0xEA, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFF, 0xC4, 0x00, 0x1F, 0x01, 0x00, 0x03, 0x01, 
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
    0x08, 0x09, 0x0A, 0x0B, 0xFF, 0xC4, 0x00, 0xB5, 0x11, 0x00, 0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04, 0x07, 0x05, 0x04, 0x04, 
    0x00, 0x01, 0x02, 0x77, 0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71, 0x13, 
    0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xA1, 0xB1, 0xC1, 0x09, 0x23, 0x33, 0x52, 0xF0, 0x15, 0x62, 0x72, 0xD1, 0x0A, 0x16, 
    0x24, 0x34, 0xE1, 0x25, 0xF1, 0x17, 0x18, 0x19, 0x1A, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x43, 
    0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 
    0x69, 0x6A, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x92, 0x93, 
    0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 
    0xB7, 0xB8, 0xB9, 0xBA, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 
    0xDA, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFF, 0xDA, 0x00, 
    0x0C, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3F, 0x00, 0xF7, 0xFA, 0x28, 0xA2, 0x80, 0x3F, 0xFF, 0xD9
};

template<class T>
struct IpintDestroyer
{
    void operator()(T *instance) const
    {
        if(0 != instance)
        {
            instance->Destroy();
        }
    }
};

template<class T>
inline boost::shared_ptr<T> MakePtr(T* p)
{
    boost::shared_ptr<T> result(p, IpintDestroyer<T>());
    return result;
}

void CheckConversionToFromSample(ITVSDKUTILES::IMultimediaFrameFactoryPtr f, 
                                   boost::shared_ptr<ITV8::MFF::IMultimediaBuffer> buff, 
                                   ITV8::timestamp_t timestamp)
{
    ITVSDKUTILES::ISampleContainer* sampleContainer = 
        ITV8::contract_cast<ITVSDKUTILES::ISampleContainer>(buff.get());

    BOOST_REQUIRE(sampleContainer);
    NMMSS::PSample sample(sampleContainer->Detach());

    BOOST_REQUIRE(!!sample);

    boost::shared_ptr<ITV8::MFF::IMultimediaBuffer> buff1 =
        MakePtr( CreateFrameFromSample(0, sample.Get(), "test"));
    BOOST_REQUIRE( !!buff1 );
    BOOST_CHECK_EQUAL( timestamp, buff1->GetTimeStamp() );
}

void CheckCompressedFrame(ITVSDKUTILES::IMultimediaFrameFactoryPtr f, const std::string& name, 
                          ITV8::uint32_t bufferSize, ITV8::timestamp_t timestamp, 
                          ITV8::bool_t isKeyFrame, const uint8_t* data=0)
{
    boost::shared_ptr<ITV8::MFF::ICompressedBuffer> buff =
        MakePtr( f->AllocateCompressedFrame(name.c_str(), bufferSize, timestamp, isKeyFrame));

    BOOST_REQUIRE(!!buff);
    BOOST_CHECK_EQUAL( name, buff->GetName() );
    BOOST_CHECK( buff->GetBuffer() );
    BOOST_CHECK_EQUAL( bufferSize, buff->GetBufferSize() );
    BOOST_CHECK_EQUAL( timestamp, buff->GetTimeStamp() );
    BOOST_CHECK_EQUAL( isKeyFrame, buff->IsKeyFrame() );
    if(data)
    {
        memcpy(buff->GetBuffer(), data, bufferSize);
    }

    CheckConversionToFromSample(f, buff, timestamp);
}

void CheckCompositeFrame(ITVSDKUTILES::IMultimediaFrameFactoryPtr f, const std::string& name,
                         ITV8::uint32_t bufferSize, ITV8::uint32_t stride, ITV8::timestamp_t timestamp,
                         ITV8::uint32_t width, ITV8::uint32_t height)
{
    boost::shared_ptr<ITV8::MFF::ICompositeBuffer> buff =
        MakePtr(f->AllocateCompositeFrame(name.c_str(), bufferSize, stride, timestamp, width, height));

    BOOST_REQUIRE(!!buff);
    BOOST_CHECK_EQUAL( name, buff->GetName() );
    BOOST_CHECK( buff->GetBuffer() );
    BOOST_CHECK_EQUAL( bufferSize, buff->GetBufferSize() );
    BOOST_CHECK_EQUAL( timestamp, buff->GetTimeStamp() );
    BOOST_CHECK_EQUAL( width, buff->GetWidth() );
    BOOST_CHECK_EQUAL( height, buff->GetHeight() );
    BOOST_CHECK( ITV8::contract_cast<ITV8::MFF::ICompositeBuffer2>(buff.get()));
    BOOST_CHECK_EQUAL( stride, ITV8::contract_cast<ITV8::MFF::ICompositeBuffer2>(buff.get())->GetStride() );

    CheckConversionToFromSample(f, buff, timestamp);
}

void CheckPlanarFrame(ITVSDKUTILES::IMultimediaFrameFactoryPtr f, const std::string& name,
                      ITV8::uint32_t nYSize, ITV8::uint32_t nUSize, ITV8::uint32_t nVSize,
                      ITV8::uint32_t StrideY, ITV8::uint32_t StrideU, ITV8::uint32_t StrideV,
                      ITV8::timestamp_t timestamp, ITV8::uint32_t width, ITV8::uint32_t height)
{
    boost::shared_ptr<ITV8::MFF::IPlanarBuffer> buff =
        MakePtr(f->AllocatePlanarFrame(name.c_str(), nYSize, nUSize, nVSize, StrideY, StrideU,
        StrideV, timestamp, width, height));

    BOOST_REQUIRE(!!buff);
    BOOST_CHECK_EQUAL( name, buff->GetName() );
    BOOST_CHECK( !nYSize || buff->GetBufferY() );
    BOOST_CHECK( !nUSize || buff->GetBufferU() );
    BOOST_CHECK( !nVSize || buff->GetBufferV() );
    BOOST_CHECK_EQUAL( nYSize, buff->GetBufferYSize() );
    BOOST_CHECK_EQUAL( nUSize, buff->GetBufferUSize() );
    BOOST_CHECK_EQUAL( nVSize, buff->GetBufferVSize() );
    BOOST_CHECK_EQUAL( StrideY, buff->GetStrideY() );
    BOOST_CHECK_EQUAL( StrideU, buff->GetStrideU() );
    BOOST_CHECK_EQUAL( StrideV, buff->GetStrideV() );
    BOOST_CHECK_EQUAL( timestamp, buff->GetTimeStamp() );
    BOOST_CHECK_EQUAL( width, buff->GetWidth() );
    BOOST_CHECK_EQUAL( height, buff->GetHeight() );

    CheckConversionToFromSample(f, buff, timestamp);
}

BOOST_AUTO_TEST_SUITE(ItvSdkUtil)

BOOST_AUTO_TEST_CASE(AllocatingFrame)
{
    using namespace NMMSS::NMediaType;
    using namespace ITV8::CSDK;

    static NMMSS::PAllocatorFactory allocatorFacory(NMMSS::GetLocalAllocatorFactory());
    BOOST_REQUIRE(!!allocatorFacory);
    static NMMSS::PAllocator allocator(
        allocatorFacory->CreateAllocator(NMMSS::SAllocatorRequirements(10, 1024, 0), nullptr));
    BOOST_REQUIRE(!!allocator);

	BOOST_REQUIRE(NLogging::GetDefaultLogger()!=0);
    ITVSDKUTILES::IMultimediaFrameFactoryPtr factory = 
		ITVSDKUTILES::CreateFrameFactory( NLogging::GetDefaultLogger(), allocator.Get(), "test factory");

    BOOST_REQUIRE(factory.get() != 0);

    CheckCompressedFrame(factory, ITV8_VIDEO_CODEC_MJPEG, sizeof(smallJpeg), 20, true, smallJpeg);
    CheckCompressedFrame(factory, ITV8_VIDEO_CODEC_MPEG4, 10, 30, false);
    CheckCompressedFrame(factory, ITV8_VIDEO_CODEC_MPEG2, 10, 30, false);
    CheckCompressedFrame(factory, ITV8_VIDEO_CODEC_H264, 10, 40, true);
    CheckCompressedFrame(factory, ITV8_VIDEO_CODEC_H264_INTERLACED, 50, 20, false);
    CheckCompressedFrame(factory, ITV8_VIDEO_CODEC_H265, 10, 40, true);
    CheckCompressedFrame(factory, ITV8_VIDEO_CODEC_H263, 10, 60, true);
    CheckCompressedFrame(factory, ITV8_VIDEO_CODEC_VWV, 10, 70, false);
    CheckCompressedFrame(factory, ITV8_VIDEO_CODEC_MXPEG, 10, 80, true);
    CheckCompressedFrame(factory, ITV8_VIDEO_CODEC_BOSCH, 10, 90, false);
    CheckCompressedFrame(factory, ITV8_MAKE_CODEC_ID(1, 1), 10, 100, true);
#ifdef _WIN32
    CheckCompressedFrame(factory, ITV8_VIDEO_CODEC_WXWL, 10, 100, false);
#endif

    // Checks invalid frame format.
    BOOST_CHECK(!factory->AllocateCompressedFrame(ITV8_AUDIO_CODEC_PCM, 10, 20, true));
    // Checks invalid buffer size.
    BOOST_CHECK(!factory->AllocateCompressedFrame(ITV8_VIDEO_CODEC_MJPEG, 0, 20, true));


    if(0)
    {
        CheckCompositeFrame(factory, "RGB", 100*3, 0, 10, 10, 10);
    }

    CheckPlanarFrame(factory, "YUV420", 8*6, 8*6/2, 8*6/2,  8, 8, 8, 2010 ,8, 6);
    CheckPlanarFrame(factory, "YUV422", 8*6, 8*6,   8*6,    8, 8, 8, 2010, 8, 6);
    CheckPlanarFrame(factory, "GREY",   8*6, 0,     0,      8, 0, 0, 2010, 8, 6);

    BOOST_CHECK(!factory->AllocatePlanarFrame("InVaLiDfOrMaT", 8*6, 0,  0, 8, 0, 0, 2010, 8, 6));

    // TODO: Check AllocateAudioCompressedFrame
    // TODO: Check AllocateAudioPcmFrame
    // TODO: Check AllocateAudioG7xxFrame
}

BOOST_AUTO_TEST_SUITE_END()